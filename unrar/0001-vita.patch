diff --git a/Makefile.vita b/Makefile.vita
new file mode 100644
index 0000000..9f9eb98
--- /dev/null
+++ b/Makefile.vita
@@ -0,0 +1,26 @@
+TARGET    = libunrar.a
+OBJS      = archive.o arcread.o blake2s.o cmddata.o consio.o crc.o crypt.o \
+			dll.o encname.o errhnd.o extinfo.o extract.o filcreat.o file.o \
+			filefn.o filestr.o find.o getbits.o global.o hash.o headers.o \
+			match.o options.o pathfn.o qopen.o rar.o rarpch.o rarvm.o \
+			rawread.o rdwrfn.o rijndael.o rs.o rs16.o scantree.o secpassword.o \
+			sha1.o sha256.o smallfn.o strfn.o strlist.o system.o threadpool.o \
+			timefn.o ui.o unicode.o unpack.o volume.o
+
+PREFIX   = arm-vita-eabi
+CC       = $(PREFIX)-gcc
+CXX      = $(PREFIX)-g++
+AR       = $(PREFIX)-ar
+CFLAGS   = -Wl,-q -Wall -O3 -Wno-unused-variable -Wno-unused-but-set-variable -ffat-lto-objects -flto -DRARDLL -DUNRAR -DSILENT
+CXXFLAGS = $(CFLAGS) -std=gnu++11 -fno-rtti
+
+.PHONY: all clean
+
+all: $(TARGET)
+
+$(TARGET): $(OBJS)
+	$(AR) rcu $@ $^
+
+clean:
+	@rm -rf $(TARGET) $(OBJS)
+	@echo "Cleaned up!"
diff --git a/arcread.cpp b/arcread.cpp
index 1a401f4..4f230a1 100644
--- a/arcread.cpp
+++ b/arcread.cpp
@@ -1319,6 +1319,7 @@ void Archive::ConvertAttributes()
   // We restore native Unix attributes as is, because it can be backup.
   static mode_t mask = (mode_t) -1;
 
+#ifndef __vita__
   if (mask == (mode_t) -1)
   {
     // umask call returns the current umask value. Argument (022) is not
@@ -1328,6 +1329,9 @@ void Archive::ConvertAttributes()
     // Restore the original umask value, which was changed to 022 above.
     umask(mask);
   }
+#else
+  mask = 022;
+#endif
 
   switch(FileHead.HSType)
   {
diff --git a/extinfo.cpp b/extinfo.cpp
index 5cb90a4..cd3c577 100644
--- a/extinfo.cpp
+++ b/extinfo.cpp
@@ -9,7 +9,9 @@
 #endif
 
 #ifdef _UNIX
+#ifndef __vita__
 #include "uowners.cpp"
+#endif
 #ifdef SAVE_LINKS
 #include "ulinks.cpp"
 #endif
@@ -26,11 +28,13 @@ void SetExtraInfo20(CommandData *Cmd,Archive &Arc,wchar *Name)
   switch(Arc.SubBlockHead.SubType)
   {
 #ifdef _UNIX
+#ifndef __vita__
     case UO_HEAD:
       if (Cmd->ProcessOwners)
         ExtractUnixOwner20(Arc,Name);
       break;
 #endif
+#endif
 #ifdef _WIN_ALL
     case NTACL_HEAD:
       if (Cmd->ProcessOwners)
@@ -49,10 +53,12 @@ void SetExtraInfo20(CommandData *Cmd,Archive &Arc,wchar *Name)
 void SetExtraInfo(CommandData *Cmd,Archive &Arc,wchar *Name)
 {
 #ifdef _UNIX
+#ifndef __vita__
   if (!Cmd->Test && Cmd->ProcessOwners && Arc.Format==RARFMT15 &&
       Arc.SubHead.CmpName(SUBHEAD_TYPE_UOWNER))
     ExtractUnixOwner30(Arc,Name);
 #endif
+#endif
 #ifdef _WIN_ALL
   if (!Cmd->Test && Cmd->ProcessOwners && Arc.SubHead.CmpName(SUBHEAD_TYPE_ACL))
     ExtractACL(Arc,Name);
@@ -66,9 +72,11 @@ void SetExtraInfo(CommandData *Cmd,Archive &Arc,wchar *Name)
 void SetFileHeaderExtra(CommandData *Cmd,Archive &Arc,wchar *Name)
 {
 #ifdef _UNIX
+#ifndef __vita__
    if (Cmd->ProcessOwners && Arc.Format==RARFMT50 && Arc.FileHead.UnixOwnerSet)
      SetUnixOwner(Arc,Name);
 #endif
+#endif
 }
 
 
diff --git a/file.cpp b/file.cpp
index e7b584d..127541f 100644
--- a/file.cpp
+++ b/file.cpp
@@ -116,6 +116,7 @@ bool File::Open(const wchar *Name,uint Mode)
   WideToChar(Name,NameA,ASIZE(NameA));
 
   int handle=open(NameA,flags);
+#if !defined(__vita__)
 #ifdef LOCK_EX
 
 #ifdef _OSF_SOURCE
@@ -128,6 +129,8 @@ bool File::Open(const wchar *Name,uint Mode)
   }
 
 #endif
+#endif
+
   if (handle==-1)
     hNewFile=FILE_BAD_HANDLE;
   else
@@ -700,6 +703,7 @@ void File::SetCloseFileTime(RarTime *ftm,RarTime *fta)
 
 void File::SetCloseFileTimeByName(const wchar *Name,RarTime *ftm,RarTime *fta)
 {
+#ifndef __vita__
 #ifdef _UNIX
   bool setm=ftm!=NULL && ftm->IsSet();
   bool seta=fta!=NULL && fta->IsSet();
@@ -729,6 +733,7 @@ void File::SetCloseFileTimeByName(const wchar *Name,RarTime *ftm,RarTime *fta)
 #endif
   }
 #endif
+#endif
 }
 
 
diff --git a/filefn.cpp b/filefn.cpp
index 883c26e..5e53f5d 100644
--- a/filefn.cpp
+++ b/filefn.cpp
@@ -154,6 +154,7 @@ int64 GetFreeDisk(const wchar *Name)
       uiUserFree.u.HighPart<=uiTotalFree.u.HighPart)
     return INT32TO64(uiUserFree.u.HighPart,uiUserFree.u.LowPart);
   return 0;
+#elif defined(__vita__)
 #elif defined(_UNIX)
   wchar Root[NM];
   GetFilePath(Name,Root,ASIZE(Root));
diff --git a/os.hpp b/os.hpp
index 7df3c6c..69c17c4 100644
--- a/os.hpp
+++ b/os.hpp
@@ -147,7 +147,7 @@
 #if defined(RAR_SMP) && defined(__APPLE__)
   #include <sys/sysctl.h>
 #endif
-#ifndef SFX_MODULE
+#if !defined(SFX_MODULE) && !defined(__vita__)
     #include <sys/statvfs.h>
 #endif
 #include <pwd.h>
@@ -169,8 +169,10 @@
 
 
 #ifdef  S_IFLNK
+#if !defined(__vita__)
 #define SAVE_LINKS
 #endif
+#endif
 
 #if defined(__linux) || defined(__FreeBSD__)
 #include <sys/time.h>
@@ -215,7 +217,7 @@
 #endif
 
 // Unlike Apple x64, utimensat shall be available in all Apple M1 systems.
-#if _POSIX_C_SOURCE >= 200809L || defined(__APPLE__) && defined(__arm64__)
+#if (_POSIX_C_SOURCE >= 200809L || defined(__APPLE__) && defined(__arm64__)) && !defined(__vita__)
   #define UNIX_TIME_NS // Nanosecond time precision in Unix.
 #endif
 
diff --git a/ulinks.cpp b/ulinks.cpp
index d198f2e..9db4fbb 100644
--- a/ulinks.cpp
+++ b/ulinks.cpp
@@ -22,7 +22,8 @@ static bool UnixSymlink(CommandData *Cmd,const char *Target,const wchar *LinkNam
     }
     return false;
   }
-#ifdef USE_LUTIMES
+#ifndef __vita__
+#if USE_LUTIMES
 #ifdef UNIX_TIME_NS
   timespec times[2];
   times[0].tv_sec=fta->GetUnix();
@@ -38,6 +39,7 @@ static bool UnixSymlink(CommandData *Cmd,const char *Target,const wchar *LinkNam
   tv[1].tv_usec=long(ftm->GetUnixNS()%1000000000/1000);
   lutimes(LinkNameA,tv);
 #endif
+#endif
 #endif
 
   return true;
